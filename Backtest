import pandas as pd
import pytest
from indicadores.estrategias import (
    apply_crossover_strategy,
    bollinger_breakout_strategy,
    rsi_macd_strategy,
)
from utils.performance import calculate_performance_metrics


def criar_df_teste() -> pd.DataFrame:
    """Cria um DataFrame fictício para testes de estratégias e métricas."""
    dates = pd.date_range(start="2022-01-01", periods=10, freq="D")
    data = {
        "Close": [10, 10.5, 11, 10.8, 10.6, 10.7, 10.9, 11.1, 11.3, 11.2],
        "SMA_20": [10.0] * 10,
        "SMA_50": [9.8] * 10,
        "Bollinger_Upper": [11.2] * 10,
        "Bollinger_Lower": [9.5] * 10,
        "RSI": [29, 30, 31, 32, 72, 74, 73, 69, 68, 70],
        "MACD": [0.1, 0.12, 0.15, 0.17, -0.2, -0.25, -0.22, -0.19, -0.18, -0.16],
        "MACD_signal": [0.08, 0.10, 0.13, 0.14, -0.18, -0.20, -0.23, -0.20, -0.19, -0.18],
    }
    return pd.DataFrame(data, index=dates)


def test_crossover_strategy() -> None:
    df = apply_crossover_strategy(criar_df_teste(), "SMA_20", "SMA_50")
    assert "Signal" in df.columns, "A coluna 'Signal' não foi criada."
    assert df["Signal"].isin([1, -1, 0]).any(), "Nenhum sinal válido foi gerado."


def test_bollinger_breakout_strategy() -> None:
    df = bollinger_breakout_strategy(criar_df_teste())
    assert "Signal" in df.columns, "A coluna 'Signal' não foi criada."
    assert isinstance(df["Signal"].iloc[-1], (int, float)), "O último sinal não é numérico."


def test_rsi_macd_strategy() -> None:
    df = rsi_macd_strategy(criar_df_teste())
    assert "Signal" in df.columns, "A coluna 'Signal' não foi criada."
    assert pd.api.types.is_numeric_dtype(df["Signal"]), "O campo 'Signal' não é numérico."


def test_calculate_performance_metrics() -> None:
    df = criar_df_teste()
    df["Signal"] = 1
    df["Return"] = df["Close"].pct_change()
    df["Strategy_Return"] = df["Return"]

    metrics = calculate_performance_metrics(df)

    assert isinstance(metrics, dict), "O retorno não é um dicionário."
    assert "Retorno Acumulado (%)" in metrics, "Métrica de retorno acumulado ausente."
    assert all(isinstance(v, (int, float)) for v in metrics.values()), "Métricas devem ser numéricas."
